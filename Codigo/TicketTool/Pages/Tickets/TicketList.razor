@page "/tickets"
@inject TicketService TicketService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime  // Inyección del servicio para JavaScript

<h3 class="text-center mt-4">Listado de Tickets</h3>

<div class="container mt-4">
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Titulo</th>
                <th>Departamento</th>
                <th>Descripcion</th>
                <th>Estatus</th>
                <th>Fecha Solicitado</th>
                <th>Fecha Actualizado</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @if (Tickets != null)
            {
                foreach (var ticket in Tickets)
                {
                    <tr>
                        <td>@ticket.Titulo</td>
                        <td>@ticket.Departamento</td>
                        <td>@ticket.Descripcion</td>
                        <td>@ticket.Estatus</td>
                        <td>@ticket.FechaSolicitado.ToShortDateString()</td>
                        <td>@ticket.FechaActualizacion.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => EditTicket(ticket.Id.ToString())">Editar</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => ConfirmDelete(ticket.Id.ToString())">Borrar</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="5" class="text-center">No hay tickets disponibles</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<Ticket> Tickets;

    protected override async Task OnInitializedAsync()
    {
        Tickets = await TicketService.GetTicketsAsync();
    }

    private void EditTicket(string id)
    {
        Navigation.NavigateTo($"/ticket/edit/{id}");
    }

    private async Task ConfirmDelete(string id)
    {
        // Mostrar alerta de confirmación
        bool isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este ticket?");
        if (isConfirmed)
        {
            await DeleteTicket(id);
            // Mostrar mensaje de éxito
            await JSRuntime.InvokeVoidAsync("alert", "Ticket borrado exitosamente.");
        }
    }

    private async Task DeleteTicket(string id)
    {
        await TicketService.DeleteTicketAsync(id);
        Tickets = await TicketService.GetTicketsAsync();  // Refrescar lista después de borrar
    }
}
