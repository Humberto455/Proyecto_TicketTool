@page "/login"
@using static AuthService
@inject NavigationManager Navigation
@inject AuthService AuthService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header text-center">
                    <h3>Iniciar Sesión</h3>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(ErrorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @ErrorMessage
                        </div>
                    }
                    <div class="form-group mb-3">
                        <label for="email">Correo Electrónico</label>
                        <input type="email" class="form-control" id="email" placeholder="Email" @bind="Email" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="password">Contraseña</label>
                        <input type="password" class="form-control" id="password" placeholder="Password" @bind="Password" />
                    </div>
                    <button class="btn btn-primary w-100" @onclick="PerformLogin">Ingresar</button>
                    <div class="mt-3 text-center">
                        <p>¿No tienes una cuenta? <a href="/register">Regístrate aquí</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; } // Variable para mostrar mensajes de error

    private async Task PerformLogin()
    {
        var loginResult = await AuthService.ValidateLoginAsync(Email, Password);

        switch (loginResult)
        {
            case LoginResult.Success:
                Navigation.NavigateTo("/tickets");
                StateHasChanged(); // Forzar renderizado para reflejar el estado de autenticación
                break;
            case LoginResult.InvalidEmail:
                ErrorMessage = "El correo electrónico no está registrado.";
                break;
            case LoginResult.InvalidPassword:
                ErrorMessage = "La contraseña es incorrecta.";
                break;
        }
    }
}
